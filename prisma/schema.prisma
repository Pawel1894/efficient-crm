generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    firstLogin    Boolean
    accounts      Account[]
    sessions      Session[]
    lead          Lead[]
    deal          Deal[]
    contact       Contact[]
    activity      Activity[]
    team          Team[]

    leadCreator    Lead[]    @relation("leadCreator")
    leadEditor     Lead[]    @relation("leadEditor")
    dealCreator    Deal[]    @relation("dealCreator")
    dealEditor     Deal[]    @relation("dealEditor")
    contactCreator Contact[] @relation("contactCreator")
    contactEditor  Contact[] @relation("contactEditor")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
    id      String    @id @default(cuid())
    name    String
    user    User[]
    contact Contact[]
}

model Lead {
    id         String     @id @default(cuid())
    activities Activity[]
    deals      Deal[]
    owner      User?      @relation(fields: [ownerId], references: [id])
    status     String     @db.Text
    comment    String?    @db.LongText
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    createdBy  User       @relation("leadCreator", fields: [creatorId], references: [id])
    updatedBy  User       @relation("leadEditor", fields: [editorId], references: [id])

    contact Contact @relation(fields: [contactId], references: [id])

    creatorId String
    editorId  String
    contactId String
    ownerId   String?

    @@index([creatorId])
    @@index([editorId])
    @@index([contactId])
    @@index([ownerId])
    @@index([contactId, ownerId])
}

model Deal {
    id               String   @id @default(cuid())
    forecast         Float    @db.Float
    value            Float    @db.Float
    owner            User?    @relation(fields: [ownerId], references: [id])
    stage            String   @db.Text
    comment          String?  @db.LongText
    closeProbability Float    @db.Float
    lead             Lead?    @relation(fields: [leadId], references: [id])
    createdBy        User     @relation("dealCreator", fields: [creatorId], references: [id])
    updatedBy        User     @relation("dealEditor", fields: [editorId], references: [id])
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    leadId    String?
    creatorId String
    editorId  String
    ownerId   String?

    @@index([leadId])
    @@index([creatorId])
    @@index([editorId])
    @@index([ownerId])
    @@index([leadId, ownerId])
}

model Contact {
    id         String     @id @default(cuid())
    firstName  String
    lastName   String
    company    String
    title      String
    email      String
    phone      String
    location   String
    comment    String
    owner      User       @relation(fields: [ownerId], references: [id])
    type       String
    activities Activity[]
    leads      Lead[]
    createdBy  User       @relation("contactCreator", fields: [creatorId], references: [id])
    updatedBy  User       @relation("contactEditor", fields: [editorId], references: [id])
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    team       Team       @relation(fields: [teamId], references: [id])

    editorId  String
    creatorId String
    ownerId   String
    teamId    String

    @@index([editorId])
    @@index([creatorId])
    @@index([teamId])
    @@index([ownerId])
    @@index([teamId, ownerId])
}

model Activity {
    id        String   @id @default(cuid())
    owner     User     @relation(fields: [ownerId], references: [id])
    startTime DateTime
    endTime   DateTime
    status    String
    type      String
    contact   Contact? @relation(fields: [contactId], references: [id])
    Lead      Lead?    @relation(fields: [leadId], references: [id])

    leadId    String?
    contactId String?
    ownerId   String

    @@index([leadId])
    @@index([contactId])
    @@index([ownerId])
    @@index([ownerId, contactId])
    @@index([ownerId, leadId])
}

model Dictionary {
    id    String @id @default(cuid())
    type  Type
    value String
    label String
}

enum Type {
    ACTIVITY_STATUS
    CONTACT_TYPE
    DEAL_STAGE
    LEAD_STATUS
}
